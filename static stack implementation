// Stack Implementation using static array

#include <stdio.h>
#define CAPACITY 5

int stack[CAPACITY],top=-1;
void push(int);
int isFull(void);
int pop(void);
int isEmpty(void);
int peek(void);
void travserse(void);

int main()
{
    int ch,item,ele,pek;
    while(1)
    {
        printf("\n1.Push\n");
        printf("2.Pop\n");
        printf("3.Peek\n");
        printf("4.Traverse\n");
        printf("5.Exit\n");
        printf("Enter your choice\n");
        scanf("%d",&ch);
        printf("\n");
        switch(ch)
        {
            case 1 :
            printf("Enter the element to be pushed\n");
            scanf("%d",&item);
            push(item);
            printf("The element %d has been pushed onto the stack\n",item);
            break;
            
            case 2 :
            ele =  pop();
            if(ele==0)
            printf("Stack Underflow\n");
            else
            printf("Popped Element : %d\n",ele);
            break;
            
            case 3 :
            pek = peek();
            if(pek==0)
            printf("Stack Underflow\n");
            else
            printf("Peek Element : %d\n",pek);
            break;
            
            case 4 :
            traverse();
            break;
            
            case 5 :
            exit(0);
            
            default :
            printf("Invalid Input. Please Enter a Valid Input\n");
        }
        
    }
}
void push(int item)
{
    if(isFull())
    {
        printf("Stack Overflow\n");
    }
    else
    {
        top++;
        stack[top] = item;
    }
}
int isFull()
{
    if(top==CAPACITY-1)
    return 1;
    else
    return 0;
}
int pop()
{
    if(isEmpty())
    return 0;
    else
    return stack[top--];
}
int isEmpty()
{
    if(top==-1)
    return 1;
    else
    return 0;
}
int peek()
{
    if(isEmpty())
    return 0;
    else
    return stack[top]; 
}
void traverse()
{
    int i;
    if(isEmpty())
    printf("Stack Undeflow\n");
    else
    {
        printf("Stack elements from Top to Bottom\n");
        for(i=top;i>=0;i--)
        printf("%d\n",stack[i]);
    }
}
