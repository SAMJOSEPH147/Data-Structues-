// DYNAMIC IMPLEMENTATION OF STACK (Method 2)
#include <stdio.h>
#include <stdlib.h>
void push(int);
int pop(void);
void display(void);
int length(void);
struct node
{
    int data;
    struct node* link;
};
struct node* top = NULL;
int main()
{
    int ch,n,a;
    while(1)
    {
        printf("\n1.PUSH\n");
        printf("2.POP\n");
        printf("3.DISPLAY\n");
        printf("4.EXIT\n");
        printf("Enter your choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
                printf("Enter the element to be pushed\n");
                scanf("%d",&n);
                push(n);
                printf("Push Successfull\n");
                break;
            case 2:
                a = pop();
                if(a==0)
                    printf("STACK UNDERFLOW\n");
                else
                    printf("Popped Element  : %d\n",a);
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
                break;
            default:
                printf("Invalid choice\n");
                break;
        }
    }
    return 0;
}
void push(int n)
{
    struct node* temp;
    temp = (struct node*)malloc(sizeof(struct node));
    temp->data = n;
    temp->link = NULL;
    if(top==NULL)
        top = temp;
    else
    {
        struct node* p;
        p = top;
        while(p->link != NULL)
        {
            p = p->link;
        }
        p->link = temp;
    }
}
int pop()
{
    int a,i=1;
    struct node* p;
    struct node* q;
    p = top;
    q = top;
    if(top == NULL)
        return 0;
    else if(length()==1)
    {
        a = top->data;
        top = NULL;
        return a;
    }
    else
    {
        while(i < length()-1)
        {
            p = p->link;
            i++;
        }
        q = p->link;
        a = q->data;
        p->link = NULL;
        q->link = NULL;
        free(q);
        return a;
    }
}
int length()
{
    int count = 0;
    struct node* p;
    p = top;
    while(p != NULL)
    {
        count++;
        p = p->link;
    }
    return count;
}
void display()
{
    int i,j,k;
    i = 0;
    j = length()-1;
    struct node* q;
    q = top;
    if(top == NULL)
        printf("STACK IS EMPTY\n");
    else
    {
        printf("Stack Elements from top to bottom are :\n");
        while(i<j)
        {
            k = 0;
            while(k<j)
            {
                q = q->link;
                k++;
            }
            printf("%d\n",q->data);
            j--;
            q = top;
        }
        printf("%d\n",q->data);
    }
}
